use 5.016;
use warnings;
use diagnostics;

use constant PREFIXSTATE => 16;
use constant BYTE => 256;

open my $outState, ">", "prefix_state_table.dat" or die "wtf";
open my $outSignal, ">", "prefix_signal_table.dat" or die "wtf";
my @state = ();
my @signal = ();
for(0..PREFIXSTATE * BYTE - 1) {
	#скорее всего это не нужно и undef итак запишется в файл как 0
	push @state, 0;
	push @signal, 0;
}
#0 состояние останется пустым - так удобнее
{
	#15 состояние
	{
		$state[0x66 + (256 * 15)] = 512 *  1;
		$state[0x67 + (256 * 15)] = 512 *  11;
		$state[0x2f + (256 * 15)] = 512 *  13;
		$state[0x3f + (256 * 15)] = 512 *  13;
		$state[0x2e + (256 * 15)] = 512 *  13;
		$state[0x3e + (256 * 15)] = 512 *  13;
		$state[0x26 + (256 * 15)] = 512 *  13;
		$state[0x36 + (256 * 15)] = 512 *  13;
		$state[0x64 + (256 * 15)] = 512 *  13;
		$state[0x65 + (256 * 15)] = 512 *  13;
		$state[0xf0 + (256 * 15)] = 512 *  13;
		$state[0xf2 + (256 * 15)] = 512 *  3;
		$state[0xf3 + (256 * 15)] = 512 *  7;
		
		for(0..BYTE) {
			$signal[$_] = 15;
		}
		
		
		$signal[0x66 + (256 * 15)] = 0;
		$signal[0x67 + (256 * 15)] = 0;
		$signal[0x2f + (256 * 15)] = 0;
		$signal[0x3f + (256 * 15)] = 0;
		$signal[0x2e + (256 * 15)] = 0;
		$signal[0x3e + (256 * 15)] = 0;
		$signal[0x26 + (256 * 15)] = 0;
		$signal[0x36 + (256 * 15)] = 0;
		$signal[0x64 + (256 * 15)] = 0;
		$signal[0x65 + (256 * 15)] = 0;
		$signal[0xf0 + (256 * 15)] = 0;
		$signal[0xf2 + (256 * 15)] = 0;
		$signal[0xf3 + (256 * 15)] = 0;
	}

	#1 состояние
	{
		$state[0x66 + (256 * 1) ] = 512 *  1;
		$state[0x67 + (256 * 1) ] = 512 *  12;
		$state[0x2f + (256 * 1) ] = 512 *  14;
		$state[0x3f + (256 * 1) ] = 512 *  14;
		$state[0x2e + (256 * 1) ] = 512 *  14;
		$state[0x3e + (256 * 1) ] = 512 *  14;
		$state[0x26 + (256 * 1) ] = 512 *  14;
		$state[0x36 + (256 * 1) ] = 512 *  14;
		$state[0x64 + (256 * 1) ] = 512 *  14;
		$state[0x65 + (256 * 1) ] = 512 *  14;
		$state[0xf0 + (256 * 1) ] = 512 *  14;
		$state[0xf2 + (256 * 1) ] = 512 *  4;
		$state[0xf3 + (256 * 1) ] = 512 *  8;
		
		for(0..BYTE) {
			$signal[$_] = 1;
		}
		
		$signal[0x66 + (256 * 1) ] = 0;
		$signal[0x67 + (256 * 1) ] = 0;
		$signal[0x2f + (256 * 1) ] = 0;
		$signal[0x3f + (256 * 1) ] = 0;
		$signal[0x2e + (256 * 1) ] = 0;
		$signal[0x3e + (256 * 1) ] = 0;
		$signal[0x26 + (256 * 1) ] = 0;
		$signal[0x36 + (256 * 1) ] = 0;
		$signal[0x64 + (256 * 1) ] = 0;
		$signal[0x65 + (256 * 1) ] = 0;
		$signal[0xf0 + (256 * 1) ] = 0;
		$signal[0xf2 + (256 * 1) ] = 0;
		$signal[0xf3 + (256 * 1) ] = 0;
	}
	
	#2 состояние
	{
		$state[0x66 + (256 * 2) ] = 512 *  2;
		$state[0x67 + (256 * 2) ] = 512 *  12;
		$state[0x2f + (256 * 2) ] = 512 *  12;
		$state[0x3f + (256 * 2) ] = 512 *  12;
		$state[0x2e + (256 * 2) ] = 512 *  12;
		$state[0x3e + (256 * 2) ] = 512 *  12;
		$state[0x26 + (256 * 2) ] = 512 *  12;
		$state[0x36 + (256 * 2) ] = 512 *  12;
		$state[0x64 + (256 * 2) ] = 512 *  12;
		$state[0x65 + (256 * 2) ] = 512 *  12;
		$state[0xf0 + (256 * 2) ] = 512 *  12;
		$state[0xf2 + (256 * 2) ] = 512 *  6;
		$state[0xf3 + (256 * 2) ] = 512 *  10;
	
		for(0..BYTE) {
			$signal[$_] = 2;
		}
		
		$signal[0x66 + (256 * 2) ] = 0;
		$signal[0x67 + (256 * 2) ] = 0;
		$signal[0x2f + (256 * 2) ] = 0;
		$signal[0x3f + (256 * 2) ] = 0;
		$signal[0x2e + (256 * 2) ] = 0;
		$signal[0x3e + (256 * 2) ] = 0;
		$signal[0x26 + (256 * 2) ] = 0;
		$signal[0x36 + (256 * 2) ] = 0;
		$signal[0x64 + (256 * 2) ] = 0;
		$signal[0x65 + (256 * 2) ] = 0;
		$signal[0xf0 + (256 * 2) ] = 0;
		$signal[0xf2 + (256 * 2) ] = 0;
		$signal[0xf3 + (256 * 2) ] = 0;
	}
	
	#3 состояние
	{
		$state[0x66 + (256 * 3) ] = 512 *  1;
		$state[0x67 + (256 * 3) ] = 512 *  11;
		$state[0x2f + (256 * 3) ] = 512 *  13;
		$state[0x3f + (256 * 3) ] = 512 *  13;
		$state[0x2e + (256 * 3) ] = 512 *  13;
		$state[0x3e + (256 * 3) ] = 512 *  13;
		$state[0x26 + (256 * 3) ] = 512 *  13;
		$state[0x36 + (256 * 3) ] = 512 *  13;
		$state[0x64 + (256 * 3) ] = 512 *  13;
		$state[0x65 + (256 * 3) ] = 512 *  13;
		$state[0xf0 + (256 * 3) ] = 512 *  13;
		$state[0xf2 + (256 * 3) ] = 512 *  3;
		$state[0xf3 + (256 * 3) ] = 512 *  7;
		
		for(0..BYTE) {
			$signal[$_] = 3;
		}
		
		$signal[0x66 + (256 * 3) ] = 0;
		$signal[0x67 + (256 * 3) ] = 0;
		$signal[0x2f + (256 * 3) ] = 0;
		$signal[0x3f + (256 * 3) ] = 0;
		$signal[0x2e + (256 * 3) ] = 0;
		$signal[0x3e + (256 * 3) ] = 0;
		$signal[0x26 + (256 * 3) ] = 0;
		$signal[0x36 + (256 * 3) ] = 0;
		$signal[0x64 + (256 * 3) ] = 0;
		$signal[0x65 + (256 * 3) ] = 0;
		$signal[0xf0 + (256 * 3) ] = 0;
		$signal[0xf2 + (256 * 3) ] = 0;
		$signal[0xf3 + (256 * 3) ] = 0;
	}
	
	#4 состояние
	{
		$state[0x66 + (256 * 4) ] = 512 *  1;
		$state[0x67 + (256 * 4) ] = 512 *  12;
		$state[0x2f + (256 * 4) ] = 512 *  14;
		$state[0x3f + (256 * 4) ] = 512 *  14;
		$state[0x2e + (256 * 4) ] = 512 *  14;
		$state[0x3e + (256 * 4) ] = 512 *  14;
		$state[0x26 + (256 * 4) ] = 512 *  14;
		$state[0x36 + (256 * 4) ] = 512 *  14;
		$state[0x64 + (256 * 4) ] = 512 *  14;
		$state[0x65 + (256 * 4) ] = 512 *  14;
		$state[0xf0 + (256 * 4) ] = 512 *  14;
		$state[0xf2 + (256 * 4) ] = 512 *  4;
		$state[0xf3 + (256 * 4) ] = 512 *  8;
	
		for(0..BYTE) {
			$signal[$_] = 4;
		}
		
		$signal[0x66 + (256 * 4) ] = 0;
		$signal[0x67 + (256 * 4) ] = 0;
		$signal[0x2f + (256 * 4) ] = 0;
		$signal[0x3f + (256 * 4) ] = 0;
		$signal[0x2e + (256 * 4) ] = 0;
		$signal[0x3e + (256 * 4) ] = 0;
		$signal[0x26 + (256 * 4) ] = 0;
		$signal[0x36 + (256 * 4) ] = 0;
		$signal[0x64 + (256 * 4) ] = 0;
		$signal[0x65 + (256 * 4) ] = 0;
		$signal[0xf0 + (256 * 4) ] = 0;
		$signal[0xf2 + (256 * 4) ] = 0;
		$signal[0xf3 + (256 * 4) ] = 0;
	}
	
	#5 состояние
	{
		$state[0x66 + (256 * 5) ] = 512 *  2;
		$state[0x67 + (256 * 5) ] = 512 *  11;
		$state[0x2f + (256 * 5) ] = 512 *  11;
		$state[0x3f + (256 * 5) ] = 512 *  11;
		$state[0x2e + (256 * 5) ] = 512 *  11;
		$state[0x3e + (256 * 5) ] = 512 *  11;
		$state[0x26 + (256 * 5) ] = 512 *  11;
		$state[0x36 + (256 * 5) ] = 512 *  11;
		$state[0x64 + (256 * 5) ] = 512 *  11;
		$state[0x65 + (256 * 5) ] = 512 *  11;
		$state[0xf0 + (256 * 5) ] = 512 *  11;
		$state[0xf2 + (256 * 5) ] = 512 *  5;
		$state[0xf3 + (256 * 5) ] = 512 *  9;
	
		for(0..BYTE) {
			$signal[$_] = 5;
		}
		
		$signal[0x66 + (256 * 5) ] = 0;
		$signal[0x67 + (256 * 5) ] = 0;
		$signal[0x2f + (256 * 5) ] = 0;
		$signal[0x3f + (256 * 5) ] = 0;
		$signal[0x2e + (256 * 5) ] = 0;
		$signal[0x3e + (256 * 5) ] = 0;
		$signal[0x26 + (256 * 5) ] = 0;
		$signal[0x36 + (256 * 5) ] = 0;
		$signal[0x64 + (256 * 5) ] = 0;
		$signal[0x65 + (256 * 5) ] = 0;
		$signal[0xf0 + (256 * 5) ] = 0;
		$signal[0xf2 + (256 * 5) ] = 0;
		$signal[0xf3 + (256 * 5) ] = 0;
	}
	
	#6 состояние
	{
		$state[0x66 + (256 * 6) ] = 512 *  2;
		$state[0x67 + (256 * 6) ] = 512 *  12;
		$state[0x2f + (256 * 6) ] = 512 *  12;
		$state[0x3f + (256 * 6) ] = 512 *  12;
		$state[0x2e + (256 * 6) ] = 512 *  12;
		$state[0x3e + (256 * 6) ] = 512 *  12;
		$state[0x26 + (256 * 6) ] = 512 *  12;
		$state[0x36 + (256 * 6) ] = 512 *  12;
		$state[0x64 + (256 * 6) ] = 512 *  12;
		$state[0x65 + (256 * 6) ] = 512 *  12;
		$state[0xf0 + (256 * 6) ] = 512 *  12;
		$state[0xf2 + (256 * 6) ] = 512 *  6;
		$state[0xf3 + (256 * 6) ] = 512 *  10;
	
		for(0..BYTE) {
			$signal[$_] = 6;
		}
		
		$signal[0x66 + (256 * 6) ] = 0;
		$signal[0x67 + (256 * 6) ] = 0;
		$signal[0x2f + (256 * 6) ] = 0;
		$signal[0x3f + (256 * 6) ] = 0;
		$signal[0x2e + (256 * 6) ] = 0;
		$signal[0x3e + (256 * 6) ] = 0;
		$signal[0x26 + (256 * 6) ] = 0;
		$signal[0x36 + (256 * 6) ] = 0;
		$signal[0x64 + (256 * 6) ] = 0;
		$signal[0x65 + (256 * 6) ] = 0;
		$signal[0xf0 + (256 * 6) ] = 0;
		$signal[0xf2 + (256 * 6) ] = 0;
		$signal[0xf3 + (256 * 6) ] = 0;
	}
	
	#7 состояние
	{
		$state[0x66 + (256 * 7) ] = 512 *  1;
		$state[0x67 + (256 * 7) ] = 512 *  11;
		$state[0x2f + (256 * 7) ] = 512 *  13;
		$state[0x3f + (256 * 7) ] = 512 *  13;
		$state[0x2e + (256 * 7) ] = 512 *  13;
		$state[0x3e + (256 * 7) ] = 512 *  13;
		$state[0x26 + (256 * 7) ] = 512 *  13;
		$state[0x36 + (256 * 7) ] = 512 *  13;
		$state[0x64 + (256 * 7) ] = 512 *  13;
		$state[0x65 + (256 * 7) ] = 512 *  13;
		$state[0xf0 + (256 * 7) ] = 512 *  13;
		$state[0xf2 + (256 * 7) ] = 512 *  3;
		$state[0xf3 + (256 * 7) ] = 512 *  7;

		for(0..BYTE) {
			$signal[$_] = 7;
		}
		
		$signal[0x66 + (256 * 7) ] = 0;
		$signal[0x67 + (256 * 7) ] = 0;
		$signal[0x2f + (256 * 7) ] = 0;
		$signal[0x3f + (256 * 7) ] = 0;
		$signal[0x2e + (256 * 7) ] = 0;
		$signal[0x3e + (256 * 7) ] = 0;
		$signal[0x26 + (256 * 7) ] = 0;
		$signal[0x36 + (256 * 7) ] = 0;
		$signal[0x64 + (256 * 7) ] = 0;
		$signal[0x65 + (256 * 7) ] = 0;
		$signal[0xf0 + (256 * 7) ] = 0;
		$signal[0xf2 + (256 * 7) ] = 0;
		$signal[0xf3 + (256 * 7) ] = 0;
	}
		
	#8 состояние
	{
		$state[0x66 + (256 * 8) ] = 512 *  1;
		$state[0x67 + (256 * 8) ] = 512 *  12;
		$state[0x2f + (256 * 8) ] = 512 *  14;
		$state[0x3f + (256 * 8) ] = 512 *  14;
		$state[0x2e + (256 * 8) ] = 512 *  14;
		$state[0x3e + (256 * 8) ] = 512 *  14;
		$state[0x26 + (256 * 8) ] = 512 *  14;
		$state[0x36 + (256 * 8) ] = 512 *  14;
		$state[0x64 + (256 * 8) ] = 512 *  14;
		$state[0x65 + (256 * 8) ] = 512 *  14;
		$state[0xf0 + (256 * 8) ] = 512 *  14;
		$state[0xf2 + (256 * 8) ] = 512 *  4;
		$state[0xf3 + (256 * 8) ] = 512 *  8;

		for(0..BYTE) {
			$signal[$_] = 8;
		}
		
		$signal[0x66 + (256 * 8) ] = 0;
		$signal[0x67 + (256 * 8) ] = 0;
		$signal[0x2f + (256 * 8) ] = 0;
		$signal[0x3f + (256 * 8) ] = 0;
		$signal[0x2e + (256 * 8) ] = 0;
		$signal[0x3e + (256 * 8) ] = 0;
		$signal[0x26 + (256 * 8) ] = 0;
		$signal[0x36 + (256 * 8) ] = 0;
		$signal[0x64 + (256 * 8) ] = 0;
		$signal[0x65 + (256 * 8) ] = 0;
		$signal[0xf0 + (256 * 8) ] = 0;
		$signal[0xf2 + (256 * 8) ] = 0;
		$signal[0xf3 + (256 * 8) ] = 0;
	}
	
	#9 состояние
	{
		$state[0x66 + (256 * 9) ] = 512 *  2;
		$state[0x67 + (256 * 9) ] = 512 *  11;
		$state[0x2f + (256 * 9) ] = 512 *  11;
		$state[0x3f + (256 * 9) ] = 512 *  11;
		$state[0x2e + (256 * 9) ] = 512 *  11;
		$state[0x3e + (256 * 9) ] = 512 *  11;
		$state[0x26 + (256 * 9) ] = 512 *  11;
		$state[0x36 + (256 * 9) ] = 512 *  11;
		$state[0x64 + (256 * 9) ] = 512 *  11;
		$state[0x65 + (256 * 9) ] = 512 *  11;
		$state[0xf0 + (256 * 9) ] = 512 *  11;
		$state[0xf2 + (256 * 9) ] = 512 *  5;
		$state[0xf3 + (256 * 9) ] = 512 *  9;

		for(0..BYTE) {
			$signal[$_] = 9;
		}
		
		$signal[0x66 + (256 * 9) ] = 0;
		$signal[0x67 + (256 * 9) ] = 0;
		$signal[0x2f + (256 * 9) ] = 0;
		$signal[0x3f + (256 * 9) ] = 0;
		$signal[0x2e + (256 * 9) ] = 0;
		$signal[0x3e + (256 * 9) ] = 0;
		$signal[0x26 + (256 * 9) ] = 0;
		$signal[0x36 + (256 * 9) ] = 0;
		$signal[0x64 + (256 * 9) ] = 0;
		$signal[0x65 + (256 * 9) ] = 0;
		$signal[0xf0 + (256 * 9) ] = 0;
		$signal[0xf2 + (256 * 9) ] = 0;
		$signal[0xf3 + (256 * 9) ] = 0;
	}
	
	#10 состояние
	{
		$state[0x66 + (256 * 10) ] = 512 *  2;
		$state[0x67 + (256 * 10) ] = 512 *  12;
		$state[0x2f + (256 * 10) ] = 512 *  12;
		$state[0x3f + (256 * 10) ] = 512 *  12;
		$state[0x2e + (256 * 10) ] = 512 *  12;
		$state[0x3e + (256 * 10) ] = 512 *  12;
		$state[0x26 + (256 * 10) ] = 512 *  12;
		$state[0x36 + (256 * 10) ] = 512 *  12;
		$state[0x64 + (256 * 10) ] = 512 *  12;
		$state[0x65 + (256 * 10) ] = 512 *  12;
		$state[0xf0 + (256 * 10) ] = 512 *  12;
		$state[0xf2 + (256 * 10) ] = 512 *  6;
		$state[0xf3 + (256 * 10) ] = 512 *  10;

		for(0..BYTE) {
			$signal[$_] = 10;
		}
		
		$signal[0x66 + (256 * 10) ] = 0;
		$signal[0x67 + (256 * 10) ] = 0;
		$signal[0x2f + (256 * 10) ] = 0;
		$signal[0x3f + (256 * 10) ] = 0;
		$signal[0x2e + (256 * 10) ] = 0;
		$signal[0x3e + (256 * 10) ] = 0;
		$signal[0x26 + (256 * 10) ] = 0;
		$signal[0x36 + (256 * 10) ] = 0;
		$signal[0x64 + (256 * 10) ] = 0;
		$signal[0x65 + (256 * 10) ] = 0;
		$signal[0xf0 + (256 * 10) ] = 0;
		$signal[0xf2 + (256 * 10) ] = 0;
		$signal[0xf3 + (256 * 10) ] = 0;
	}
	
	#11 состояние
	{
		$state[0x66 + (256 * 11) ] = 512 *  2;
		$state[0x67 + (256 * 11) ] = 512 *  11;
		$state[0x2f + (256 * 11) ] = 512 *  11;
		$state[0x3f + (256 * 11) ] = 512 *  11;
		$state[0x2e + (256 * 11) ] = 512 *  11;
		$state[0x3e + (256 * 11) ] = 512 *  11;
		$state[0x26 + (256 * 11) ] = 512 *  11;
		$state[0x36 + (256 * 11) ] = 512 *  11;
		$state[0x64 + (256 * 11) ] = 512 *  11;
		$state[0x65 + (256 * 11) ] = 512 *  11;
		$state[0xf0 + (256 * 11) ] = 512 *  11;
		$state[0xf2 + (256 * 11) ] = 512 *  5;
		$state[0xf3 + (256 * 11) ] = 512 *  9;

		for(0..BYTE) {
			$signal[$_] = 11;
		}
		
		$signal[0x66 + (256 * 11) ] = 0;
		$signal[0x67 + (256 * 11) ] = 0;
		$signal[0x2f + (256 * 11) ] = 0;
		$signal[0x3f + (256 * 11) ] = 0;
		$signal[0x2e + (256 * 11) ] = 0;
		$signal[0x3e + (256 * 11) ] = 0;
		$signal[0x26 + (256 * 11) ] = 0;
		$signal[0x36 + (256 * 11) ] = 0;
		$signal[0x64 + (256 * 11) ] = 0;
		$signal[0x65 + (256 * 11) ] = 0;
		$signal[0xf0 + (256 * 11) ] = 0;
		$signal[0xf2 + (256 * 11) ] = 0;
		$signal[0xf3 + (256 * 11) ] = 0;
	}
	
	#12 состояние
	{
		$state[0x66 + (256 * 12) ] = 512 *  2;
		$state[0x67 + (256 * 12) ] = 512 *  12;
		$state[0x2f + (256 * 12) ] = 512 *  12;
		$state[0x3f + (256 * 12) ] = 512 *  12;
		$state[0x2e + (256 * 12) ] = 512 *  12;
		$state[0x3e + (256 * 12) ] = 512 *  12;
		$state[0x26 + (256 * 12) ] = 512 *  12;
		$state[0x36 + (256 * 12) ] = 512 *  12;
		$state[0x64 + (256 * 12) ] = 512 *  12;
		$state[0x65 + (256 * 12) ] = 512 *  12;
		$state[0xf0 + (256 * 12) ] = 512 *  12;
		$state[0xf2 + (256 * 12) ] = 512 *  6;
		$state[0xf3 + (256 * 12) ] = 512 *  10;

		for(0..BYTE) {
			$signal[$_] = 12;
		}
		
		$signal[0x66 + (256 * 12) ] = 0;
		$signal[0x67 + (256 * 12) ] = 0;
		$signal[0x2f + (256 * 12) ] = 0;
		$signal[0x3f + (256 * 12) ] = 0;
		$signal[0x2e + (256 * 12) ] = 0;
		$signal[0x3e + (256 * 12) ] = 0;
		$signal[0x26 + (256 * 12) ] = 0;
		$signal[0x36 + (256 * 12) ] = 0;
		$signal[0x64 + (256 * 12) ] = 0;
		$signal[0x65 + (256 * 12) ] = 0;
		$signal[0xf0 + (256 * 12) ] = 0;
		$signal[0xf2 + (256 * 12) ] = 0;
		$signal[0xf3 + (256 * 12) ] = 0;
	}
	
	#13 состояние
	{
		$state[0x66 + (256 * 13) ] = 512 *  1;
		$state[0x67 + (256 * 13) ] = 512 *  13;
		$state[0x2f + (256 * 13) ] = 512 *  13;
		$state[0x3f + (256 * 13) ] = 512 *  13;
		$state[0x2e + (256 * 13) ] = 512 *  13;
		$state[0x3e + (256 * 13) ] = 512 *  13;
		$state[0x26 + (256 * 13) ] = 512 *  13;
		$state[0x36 + (256 * 13) ] = 512 *  13;
		$state[0x64 + (256 * 13) ] = 512 *  13;
		$state[0x65 + (256 * 13) ] = 512 *  13;
		$state[0xf0 + (256 * 13) ] = 512 *  13;
		$state[0xf2 + (256 * 13) ] = 512 *  3;
		$state[0xf3 + (256 * 13) ] = 512 *  7;

		for(0..BYTE) {
			$signal[$_] = 13;
		}
		
		$signal[0x66 + (256 * 13) ] = 0;
		$signal[0x67 + (256 * 13) ] = 0;
		$signal[0x2f + (256 * 13) ] = 0;
		$signal[0x3f + (256 * 13) ] = 0;
		$signal[0x2e + (256 * 13) ] = 0;
		$signal[0x3e + (256 * 13) ] = 0;
		$signal[0x26 + (256 * 13) ] = 0;
		$signal[0x36 + (256 * 13) ] = 0;
		$signal[0x64 + (256 * 13) ] = 0;
		$signal[0x65 + (256 * 13) ] = 0;
		$signal[0xf0 + (256 * 13) ] = 0;
		$signal[0xf2 + (256 * 13) ] = 0;
		$signal[0xf3 + (256 * 13) ] = 0;
	}
	
	#14 состояние
	{
		$state[0x66 + (256 * 14) ] = 512 *  1;
		$state[0x67 + (256 * 14) ] = 512 *  12;
		$state[0x2f + (256 * 14) ] = 512 *  14;
		$state[0x3f + (256 * 14) ] = 512 *  14;
		$state[0x2e + (256 * 14) ] = 512 *  14;
		$state[0x3e + (256 * 14) ] = 512 *  14;
		$state[0x26 + (256 * 14) ] = 512 *  14;
		$state[0x36 + (256 * 14) ] = 512 *  14;
		$state[0x64 + (256 * 14) ] = 512 *  14;
		$state[0x65 + (256 * 14) ] = 512 *  14;
		$state[0xf0 + (256 * 14) ] = 512 *  14;
		$state[0xf2 + (256 * 14) ] = 512 *  4;
		$state[0xf3 + (256 * 14) ] = 512 *  8;

		for(0..BYTE) {
			$signal[$_] = 14;
		}
		
		$signal[0x66 + (256 * 14) ] = 0;
		$signal[0x67 + (256 * 14) ] = 0;
		$signal[0x2f + (256 * 14) ] = 0;
		$signal[0x3f + (256 * 14) ] = 0;
		$signal[0x2e + (256 * 14) ] = 0;
		$signal[0x3e + (256 * 14) ] = 0;
		$signal[0x26 + (256 * 14) ] = 0;
		$signal[0x36 + (256 * 14) ] = 0;
		$signal[0x64 + (256 * 14) ] = 0;
		$signal[0x65 + (256 * 14) ] = 0;
		$signal[0xf0 + (256 * 14) ] = 0;
		$signal[0xf2 + (256 * 14) ] = 0;
		$signal[0xf3 + (256 * 14) ] = 0;
	}
}
	print $outState "prefixState";
	foreach(@state) {
		print $outState " dw "."$_"." \n";
	}
	print $outSignal "prefixSignal";
	foreach(@signal) {
		print $outSignal " dw "."$_"." \n";
	}
	close $outState;
	close $outSignal;